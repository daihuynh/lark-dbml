Project example {
  Version: '1.0.0'
  database_type: 'postgres'
  Note: 'Example project for lark-dbml parser'
}

Enum "example"."answer" {
  "n/a" [note: 'Not applicable']
  "yes" [note: '''
          as known as
          True
        ''']
  "no"  [note: '\'False\'']
}

TablePartial BaseTable {
  id int [pk, increment]
}

Table "another"."user" {
  ~BaseTable
  name varchar(255) [unique]
  value decimal(12,4)

  indexes {
    name [name: 'idx_user_name', unique]
  }
}

Table "example"."option" {
  ~BaseTable
  seq int
  content varchar(255)

  indexes {
    seq            [name: 'idx_option_seq']
    (seq, content) [name: 'idx_option_seq_content', unique]
  }
}

Table "example"."question" {
  ~BaseTable
  content varchar(255)
  option_id int

  indexes {
    content [name: 'idx_question_content']
  }
}

Table "example"."questionare" {
  ~BaseTable
  name varchar(255)
  question_id int

  indexes {
    name [name: 'idx_questionare_name']
  }
}

Table "example"."user_survey" {
  id int [increment]
  user_id int [ref: > "another"."user".id]
  questionare_id int
  submission_date timestamp [default: `now()`]
  answer_given "example"."answer"

  indexes {
    (user_id, questionare_id) [pk]
    submission_date           [name: 'idx_user_survey_submission_date']
    answer_given              [name: 'idx_user_survey_answer_given']
  }
}

Ref fk_questionare_question {
  "example"."questionare".question_id > "example"."question".id [delete: cascade]
}

Ref fk_question_option {
  "example"."question".option_id > "example"."option".id [update: no action]
}

Ref fk_user_survey_questionare {
  "example"."user_survey".questionare_id > "example"."questionare".id
}
